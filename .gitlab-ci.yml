stages:
  - test
  - build_img
  - build
  - deploy
  - after_test

variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    CI_REGISTRY: "hub.cerit.io"
    CI_REGISTRY_IMAGE: "${CI_REGISTRY}/einfracz/mkdocs"

docs:
  stage: test
  image: it4innovations/docker-mdcheck:latest
  allow_failure: true
  script:
  - mdl -r ~MD013,~MD010,~MD014,~MD024,~MD026,~MD029,~MD033,~MD036,~MD037,~MD046 *.md docs.it4i # BUGS

pylint:
  stage: test
  image: it4innovations/docker-pycheck:latest
  before_script:
  - source /opt/.venv3/bin/activate
  script:
  - pylint $(find . -name "*.py" -not -name "feslicescript.py")

pysafety:
  stage: test
  image: it4innovations/docker-pycheck:latest
  allow_failure: true
  before_script:
  - source /opt/.venv3/bin/activate
  script:
  - cat requirements.txt | safety check --stdin --full-report

capitalize:
  stage: test
  image: it4innovations/docker-mkdocscheck:latest
  script:
  - find mkdocs.yml docs.it4i/ \( -name '*.md' -o -name '*.yml' \) -print0 | xargs -0 -n1 scripts/titlemd.py --test

ext_links:
  stage: after_test
  image: it4innovations/docker-mdcheck:latest
  allow_failure: true
  after_script:
  # remove JSON results
  - rm *.json
  script:
  - find docs.it4i/ -name '*.md' -exec grep --color -l http {} + | xargs awesome_bot -t 10 --allow-dupe --allow-redirect
  only:
  - master

404s:
  stage: after_test
  image: it4innovations/docker-mkdocscheck:latest
  before_script:
  - wget -V
  - echo https://${HOSTING_HOST}/review/$CI_BUILD_REF_NAME/
  - wget --spider -e robots=off -o wget.log -r -p https://${HOSTING_HOST}/review/$CI_BUILD_REF_NAME/ || true
  script:
  - cat wget.log | awk '/^Found [0-9]+ broken link[s]?.$/,/FINISHED/ { rc=-1; print $0 }; END { exit rc }'

# mkdocs:
#   stage: build
#   image: it4innovations/docker-mkdocscheck:latest
#   before_script:
#   - source /opt/.venv3/bin/activate
#   - python -V # debug
#   - pip freeze # debug
#   - mkdocs -V # debug
#   script:
#     # add version to footer
#   - bash scripts/add_version.sh
#     # get modules list from clusters
#   - bash scripts/get_modules.sh
#     # generate site_url
#   - (if [ "${CI_BUILD_REF_NAME}" != 'master' ]; then sed -i "s/\(site_url.*$\)/\1devel\/$CI_BUILD_REF_NAME\//" mkdocs.yml;fi);
#     # generate ULT for code link
#   - sed -i "s/master/$CI_BUILD_REF_NAME/g" material/partials/toc.html
#     # regenerate modules matrix
#   - python scripts/modules_matrix.py > docs.it4i/modules-matrix.md
#   - python scripts/modules_matrix.py --json > docs.it4i/modules-matrix.json
#   - curl -f0 https://code.it4i.cz/sccs/scs-api-public/raw/master/scs_api.server_public.md -o docs.it4i/apiv1.md
#     # build pages
#   - mkdocs build
#     # replace broken links in 404.html
#   - sed -i 's,href="" title=",href="/" title=",g' site/404.html
#   - cp site/404.html site/403.html
#   - sed -i 's/404 - Not found/403 - Forbidden/g' site/403.html
#     # compress sitemap
#   - gzip < site/sitemap.xml > site/sitemap.xml.gz
#   artifacts:
#     paths:
#     - site
#     expire_in: 1 week

docker-build:
  image: docker:latest
  stage: build_img
  services:
    - docker:dind
  before_script:
    - docker login -u "$HUB_REGISTRY_USER" -p "$HUB_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_SHORT_SHA"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

mkdocs:
  image: 
      name: "${CI_REGISTRY_IMAGE}:latest"
      entrypoint: ["/bin/sh", "-c"]
  stage: build
  script:
    - export SITE_VERSION="rev. $CI_COMMIT_SHORT_SHA / "$(env TZ=Europe/Prague date -I)
    - mkdocs build
  artifacts:
    paths:
      - site
    expire_in: 1 week
  only:
    - master

mkdocs-dev:
  image:
      name: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
      entrypoint: ["/bin/sh", "-c"]
  stage: build
  script:
    - export SITE_VERSION="review version; rev. $CI_COMMIT_SHORT_SHA / "$(env TZ=Europe/Prague date -I)
    - mkdocs build
  artifacts:
    paths:
      - site
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_COMMIT_BRANCH

.prepare_deploy: &prepare_deploy
  stage: deploy
  before_script: 
      - apk update && apk add rsync
      - eval $(ssh-agent -s)
      - echo "$SSH_HOSTING_KEY" | tr -d '\r' | ssh-add -
      - mkdir -p ~/.ssh
      - chmod 700 ~/.ssh
      - echo "$SSH_KNOWN_HOSTS__HOSTING" >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts

deploy production:
  needs: ["mkdocs"]
  environment:
      name: production
      url: https://${HOSTING_HOST}
  script:
    - rsync -a -e "ssh -o StrictHostKeyChecking=no" --delete --exclude=/review site/ ${HOSTING_USERNAME}@${HOSTING_HOST}:~/public_html
  only:
    - master
  <<: *prepare_deploy

deploy dev:
  needs: ["mkdocs-dev"]
  environment:
      name: review/$CI_COMMIT_REF_SLUG
      url: https://${HOSTING_HOST}/review/$CI_COMMIT_REF_SLUG
  <<: *prepare_deploy
  script:
    - rsync -a -e "ssh -o StrictHostKeyChecking=no" --delete --exclude=/review site/ ${HOSTING_USERNAME}@${HOSTING_HOST}:~/public_html/review/$CI_COMMIT_REF_SLUG
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_COMMIT_BRANCH

stop_review:
  <<: *prepare_deploy
  script:
    - ssh -o StrictHostKeyChecking=no ${HOSTING_USERNAME}@${HOSTING_HOST} rm -rf ~/public_html/review/$CI_COMMIT_REF_SLUG
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: manual
